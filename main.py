import websockets
import json
import logging
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from config import *
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(LOG_FILE)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

class OrderBookMonitor:
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞–∫–∞–Ω
        self.current_orderbook = {
            'bids': {},  # price -> quantity
            'asks': {}   # price -> quantity
        }
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.current_metrics = {
            'bid_volume': 0,
            'ask_volume': 0,
            'imbalance': 0,
            'current_price': 0
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        self.history = {
            '1m': {'time': None, 'imbalance': [], 'bid_volume': [], 'ask_volume': []},
            '5m': {'time': None, 'imbalance': [], 'bid_volume': [], 'ask_volume': []},
            '15m': {'time': None, 'imbalance': [], 'bid_volume': [], 'ask_volume': []}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_params = {
            'volume_threshold': 100000,  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
            'imbalance_threshold': 40,   # –ü–æ—Ä–æ–≥ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
            'trend_periods': {           # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
                '1m': 10,  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                '5m': 6,   # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                '15m': 4   # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        self.ws_connections = {}  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        # –î–æ–±–∞–≤–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã
        self.current_minute_data = {
            'imbalances': [],
            'bid_volumes': [],
            'ask_volumes': [],
            'minute': None
        }

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª"""
        if not os.path.exists('logs'):
            os.makedirs('logs')
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        detailed_formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        console_formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π handler –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞
        detailed_handler = logging.FileHandler(
            f'logs/detailed_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log',
            encoding='utf-8'
        )
        detailed_handler.setFormatter(detailed_formatter)
        detailed_handler.setLevel(logging.DEBUG)
        
        # –§–∞–π–ª–æ–≤—ã–π handler –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_handler = logging.FileHandler(
            f'logs/signals_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log',
            encoding='utf-8'
        )
        signals_handler.setFormatter(detailed_formatter)
        signals_handler.setLevel(logging.INFO)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        console_handler.setLevel(logging.INFO)
        
        # –î–æ–±–∞–≤–ª—è–µ–º handlers
        logger.addHandler(detailed_handler)
        logger.addHandler(signals_handler)
        logger.addHandler(console_handler)
        logger.setLevel(logging.DEBUG)

    def analyze_timeframe(self, timeframe: str, min_history: int = 3) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É"""
        try:
            if len(self.history[timeframe]['imbalance']) < min_history:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe} (–Ω—É–∂–Ω–æ {min_history}, –µ—Å—Ç—å {len(self.history[timeframe]['imbalance'])})")
                return {
                    'trend_ascii': '-',
                    'current_imbalance': self.history[timeframe]['imbalance'][-1],
                    'volume_ratio': self.history[timeframe]['bid_volume'][-1] / self.history[timeframe]['ask_volume'][-1]
                }
            
            logger.debug(f"–ê–Ω–∞–ª–∏–∑ {timeframe}: –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ = {len(self.history[timeframe]['imbalance'])}")
            
            if len(self.history[timeframe]['imbalance']) < 2:
                logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}")
                return None
            
            imbalances = self.history[timeframe]['imbalance'][-10:]
            volumes_bid = self.history[timeframe]['bid_volume'][-10:]
            volumes_ask = self.history[timeframe]['ask_volume'][-10:]
            
            logger.debug(f"–î–∞–Ω–Ω—ã–µ {timeframe}: imbalances={imbalances}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            if imbalances[-1] > imbalances[0] + 5:
                trend = 'up'
                trend_ascii = 'UP'
            elif imbalances[-1] < imbalances[0] - 5:
                trend = 'down'
                trend_ascii = 'DOWN'
            else:
                trend = 'neutral'
                trend_ascii = '-'
            
            result = {
                'trend_ascii': trend_ascii,
                'current_imbalance': imbalances[-1],
                'volume_ratio': volumes_bid[-1] / volumes_ask[-1] if volumes_ask[-1] > 0 else 1
            }
            
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {timeframe}: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {timeframe}: {str(e)}")
            return None

    def analyze_signals(self, imbalance: float, imbalance_speed: float, 
                       large_bids: list, large_asks: list, 
                       analysis_5m: dict, analysis_15m: dict,
                       volume_ratio: float) -> list:
        """–ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        stable_orders = sum(1 for k, v in self.order_behavior.items() 
                          if len(v) > 5 and self.analyze_order_behavior(k, 0, 0) == "–°—Ç–∞–±–∏–ª—å–Ω—ã–π")
        if stable_orders > 3 and abs(imbalance_speed) < 5:
            signals.append("üîµ –ù–ê–ö–û–ü–õ–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–≤–µ—Ä—Ö
        if (imbalance < -40 and  # –°–∏–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å
            analysis_5m and analysis_5m['trend'] == '‚ÜóÔ∏è' and  # –†–∞–∑–≤–æ—Ä–æ—Ç –Ω–∞ 5M
            any(order[1] > self.average_volume * 2 for order in large_bids)):  # –ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            signals.append("üü¢ –†–ê–ó–í–û–†–û–¢ –í–í–ï–†–•: –°–∏–ª—å–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å + –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–Ω–∏–∑
        if (imbalance > 40 and  # –°–∏–ª—å–Ω—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å
            analysis_5m and analysis_5m['trend'] == '‚ÜòÔ∏è' and  # –†–∞–∑–≤–æ—Ä–æ—Ç –Ω–∞ 5M
            any(order[1] > self.average_volume * 2 for order in large_asks)):  # –ö—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
            signals.append("üî¥ –†–ê–ó–í–û–†–û–¢ –í–ù–ò–ó: –°–∏–ª—å–Ω—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å + –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        flashing_orders = sum(1 for k, v in self.order_behavior.items() 
                            if self.analyze_order_behavior(k, 0, 0) == "–ú–µ—Ä—Ü–∞–µ—Ç")
        if flashing_orders > 3 and abs(imbalance_speed) > 20:
            signals.append("‚ö†Ô∏è –õ–û–ñ–ù–û–ï –î–í–ò–ñ–ï–ù–ò–ï: –ú–Ω–æ–≥–æ –º–µ—Ä—Ü–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ + –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞
        if (abs(imbalance_speed) > 15 and 
            volume_ratio > 1.5 and 
            analysis_5m and analysis_15m and 
            analysis_5m['trend'] == analysis_15m['trend']):
            direction = "–í–í–ï–†–• üöÄ" if imbalance > 0 else "–í–ù–ò–ó üîª"
            signals.append(f"‚ö° –°–ò–õ–¨–ù–´–ô –ò–ú–ü–£–õ–¨–° {direction}: –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å + –æ–±—ä–µ–º + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤")
        
        return signals

    async def process_depth_message(self, symbol: str, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω
            self._update_orderbook(message)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self._calculate_metrics()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self._update_history(current_time)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            self._print_debug_info(current_time)
            
        except Exception as e:
            logger.error(f"Error processing depth message: {e}")
    
    def _update_orderbook(self, message: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–¥—ã
            for price, qty in message['b']:
                price_float = float(price)
                qty_float = float(qty)
                if qty_float > 0:
                    self.current_orderbook['bids'][price_float] = qty_float
                else:
                    self.current_orderbook['bids'].pop(price_float, None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å–∫–∏
            for price, qty in message['a']:
                price_float = float(price)
                qty_float = float(qty)
                if qty_float > 0:
                    self.current_orderbook['asks'][price_float] = qty_float
                else:
                    self.current_orderbook['asks'].pop(price_float, None)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞: {str(e)}")
            
    def _calculate_metrics(self):
        """–†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            bids = sorted(self.current_orderbook['bids'].items(), reverse=True)[:10]  # –¢–æ–ø 10 –æ—Ä–¥–µ—Ä–æ–≤
            asks = sorted(self.current_orderbook['asks'].items())[:10]  # –¢–æ–ø 10 –æ—Ä–¥–µ—Ä–æ–≤
            
            if bids and asks:
                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É –ª—É—á—à–∏–º –±–∏–¥–æ–º –∏ –∞—Å–∫–æ–º
                self.current_metrics['current_price'] = (bids[0][0] + asks[0][0]) / 2
                
                # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –≤ USD (—Ç–æ–ª—å–∫–æ —Ç–æ–ø-10)
                self.current_metrics['bid_volume'] = sum(
                    qty * self.current_metrics['current_price'] 
                    for _, qty in bids
                )
                self.current_metrics['ask_volume'] = sum(
                    qty * self.current_metrics['current_price'] 
                    for _, qty in asks
                )
                
                # –†–∞—Å—á–µ—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
                total_volume = self.current_metrics['bid_volume'] + self.current_metrics['ask_volume']
                if total_volume > 0:
                    self.current_metrics['imbalance'] = (
                        (self.current_metrics['bid_volume'] - self.current_metrics['ask_volume']) 
                        / total_volume * 100
                    )
                else:
                    self.current_metrics['imbalance'] = 0
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {str(e)}")

    def calculate_imbalance_speed(self, timeframe='1m') -> float:
        """–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞"""
        try:
            history = self.history[timeframe]['imbalance']
            if len(history) < 2:
                return 0.0
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            prev_imbalance = history[-2]
            curr_imbalance = history[-1]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç—É
            return curr_imbalance - prev_imbalance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–º–±–∞–ª–∞–Ω—Å–∞: {str(e)}")
            return 0.0

    def detect_anomaly(self, volume_deviation: float, imbalance_speed: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if abs(volume_deviation) > 200 or abs(imbalance_speed) > 30:
            return "–í—ã—Å–æ–∫–∞—è ‚ö†Ô∏è"
        elif abs(volume_deviation) > 100 or abs(imbalance_speed) > 15:
            return "–°—Ä–µ–¥–Ω—è—è ‚ö°"
        return "–ù–∏–∑–∫–∞—è ‚úì"

    def generate_warnings(self, volume_deviation: float, imbalance_speed: float,
                         large_bids: List, large_asks: List) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        warnings = []
        
        if volume_deviation > 150:
            warnings.append("–ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º")
        
        stable_orders = sum(1 for k, v in self.order_behavior.items() 
                          if len(v) > 5 and self.analyze_order_behavior(k, 0, 0) == "–°—Ç–∞–±–∏–ª—å–Ω—ã–π")
        if stable_orders > 3:
            warnings.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è")
        
        if imbalance_speed > 20:
            direction = "–≤–≤–µ—Ä—Ö" if imbalance_speed > 0 else "–≤–Ω–∏–∑"
            warnings.append(f"–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è {direction}")
        
        return warnings

    async def connect_to_binance(self, symbol: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞"""
        ws_url = f"wss://fstream.binance.com/ws/{symbol.lower()}@depth@100ms"
        logger.debug(f"Attempting to connect to: {ws_url}")
        
        try:
            async with websockets.connect(ws_url) as websocket:
                logger.info(f"Connected to Binance Futures WebSocket for {symbol}")
                self.ws_connections[symbol] = websocket
                
                while True:
                    try:
                        message = await websocket.recv()
                        await self.process_depth_message(symbol, json.loads(message))
                    except Exception as e:
                        logger.error(f"Error processing message: {e}")
                        await asyncio.sleep(1)
        except Exception as e:
            logger.error(f"WebSocket connection error: {e}")
            await asyncio.sleep(5)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("Starting order monitoring system")
        symbol = SYMBOL.replace('/', '').lower()
        
        while True:
            try:
                await self.connect_to_binance(symbol)
            except Exception as e:
                logger.error(f"Connection error: {e}")
                await asyncio.sleep(5)

    async def calculate_average_volume(self, current_volume: float) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞"""
        if not hasattr(self, '_volume_samples'):
            self._volume_samples = []
        
        self._volume_samples.append(current_volume)
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–Ω–∞—á–µ–Ω–∏–π
        if len(self._volume_samples) > 100:
            self._volume_samples.pop(0)
        
        return sum(self._volume_samples) / len(self._volume_samples)

    def _update_history(self, current_time: datetime):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–∏–π –º–∏–Ω—É—Ç–Ω—ã–π –±—É—Ñ–µ—Ä
            if self.current_minute_data['minute'] != current_time.minute:
                # –ï—Å–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –º–∏–Ω—É—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if self.current_minute_data['minute'] is not None and self.current_minute_data['imbalances']:
                    avg_imbalance = sum(self.current_minute_data['imbalances']) / len(self.current_minute_data['imbalances'])
                    avg_bid_vol = sum(self.current_minute_data['bid_volumes']) / len(self.current_minute_data['bid_volumes'])
                    avg_ask_vol = sum(self.current_minute_data['ask_volumes']) / len(self.current_minute_data['ask_volumes'])

                    logger.debug(f"–ú–∏–Ω—É—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
                            f"Avg Imb: {avg_imbalance:.2f}% "
                            f"(min: {min(self.current_minute_data['imbalances']):.2f}%, "
                            f"max: {max(self.current_minute_data['imbalances']):.2f}%), "
                            f"Avg Bid Vol: {avg_bid_vol:.0f}, "
                            f"Avg Ask Vol: {avg_ask_vol:.0f}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    self.history['1m']['imbalance'].append(avg_imbalance)
                    self.history['1m']['bid_volume'].append(avg_bid_vol)
                    self.history['1m']['ask_volume'].append(avg_ask_vol)
                    self.history['1m']['time'] = current_time

                    # –í—ã–≤–æ–¥–∏–º –º–∏–Ω—É—Ç–Ω—É—é —Å–≤–æ–¥–∫—É
                    analysis = self.analyze_timeframe('1m', min_history=1)
                    if analysis:
                        logger.info("\n".join([
                            "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê 1M ===",
                            f"1m  | Trend: {analysis['trend_ascii']:4} | "
                            f"Imb: {analysis['current_imbalance']:+6.1f}% | "
                            f"Vol Ratio: {analysis['volume_ratio']:4.1f}",
                            "==================\n"
                        ]))

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º 5m –∏ 15m —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –º–∏–Ω—É—Ç—ã
                    if current_time.second == 0 and current_time.microsecond < 100000:
                        if current_time.minute % 5 == 0:
                            self._update_higher_timeframe('5m', current_time, 5)
                            analysis_5m = self.analyze_timeframe('5m', min_history=1)
                            if analysis_5m:
                                logger.info("\n".join([
                                    "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê 5M ===",
                                    f"5m  | Trend: {analysis_5m['trend_ascii']:4} | "
                                    f"Imb: {analysis_5m['current_imbalance']:+6.1f}% | "
                                    f"Vol Ratio: {analysis_5m['volume_ratio']:4.1f}",
                                    "==================\n"
                                ]))

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º 15m —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            if current_time.minute % 15 == 0:
                                self._update_higher_timeframe('15m', current_time, 15)
                                analysis_15m = self.analyze_timeframe('15m', min_history=1)
                                if analysis_15m:
                                    logger.info("\n".join([
                                        "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê 15M ===",
                                        f"15m | Trend: {analysis_15m['trend_ascii']:4} | "
                                        f"Imb: {analysis_15m['current_imbalance']:+6.1f}% | "
                                        f"Vol Ratio: {analysis_15m['volume_ratio']:4.1f}",
                                        "==================\n"
                                    ]))
                
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç—ã
                self.current_minute_data = {
                    'imbalances': [],
                    'bid_volumes': [],
                    'ask_volumes': [],
                    'minute': current_time.minute
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
            self.current_minute_data['imbalances'].append(self.current_metrics['imbalance'])
            self.current_minute_data['bid_volumes'].append(self.current_metrics['bid_volume'])
            self.current_minute_data['ask_volumes'].append(self.current_metrics['ask_volume'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
            logger.exception(e)
        
    def _update_higher_timeframe(self, timeframe: str, current_time: datetime, n_minutes: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç–∞—Ä—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            imb = sum(self.history['1m']['imbalance'][-n_minutes:]) / n_minutes
            bid = sum(self.history['1m']['bid_volume'][-n_minutes:]) / n_minutes
            ask = sum(self.history['1m']['ask_volume'][-n_minutes:]) / n_minutes
            
            self.history[timeframe]['imbalance'].append(imb)
            self.history[timeframe]['bid_volume'].append(bid)
            self.history[timeframe]['ask_volume'].append(ask)
            self.history[timeframe]['time'] = current_time
            
            logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ {timeframe} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: Imb={imb:.2f}%, Bid Vol={bid:.0f}, Ask Vol={ask:.0f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {timeframe}: {str(e)}")
    
    def _cleanup_history(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        max_items = {
            '1m': 60,  # –•—Ä–∞–Ω–∏–º —á–∞—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è 1m
            '5m': 12,  # –•—Ä–∞–Ω–∏–º —á–∞—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è 5m
            '15m': 4   # –•—Ä–∞–Ω–∏–º —á–∞—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è 15m
        }
        for tf in self.history:
            while len(self.history[tf]['imbalance']) > max_items[tf]:
                self.history[tf]['imbalance'].pop(0)
                self.history[tf]['bid_volume'].pop(0)
                self.history[tf]['ask_volume'].pop(0)
    
    def _print_debug_info(self, current_time: datetime):
        """–í—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥—ã
        if current_time.microsecond < 100000:
            metrics_info = (
                f"Price: {self.current_metrics['current_price']:.2f} | "
                f"Bid Vol: {self.current_metrics['bid_volume']:,.0f} | "
                f"Ask Vol: {self.current_metrics['ask_volume']:,.0f} | "
                f"Imb: {self.current_metrics['imbalance']:+.2f}%"
            )
            logger.debug(metrics_info)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º —Ç–æ–ª—å–∫–æ –≤ 0 —Å–µ–∫—É–Ω–¥—É –∫–∞–∂–¥–æ–π –º–∏–Ω—É—Ç—ã
            # –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ (microsecond < 1000)
            if current_time.second == 0 and current_time.microsecond < 1000:
                timeframe_stats = []
                
                # 1m —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                analysis_1m = self.analyze_timeframe('1m')
                if analysis_1m:
                    timeframe_stats.append("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê 1M ===")
                    timeframe_stats.append(
                        f"1m  | Trend: {analysis_1m['trend_ascii']:4} | "
                        f"Imb: {analysis_1m['current_imbalance']:+6.1f}% | "
                        f"Vol Ratio: {analysis_1m['volume_ratio']:4.1f}"
                    )
                    timeframe_stats.append("==================\n")
                
                # 5m —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if current_time.minute % 5 == 0:
                    analysis_5m = self.analyze_timeframe('5m')
                    if analysis_5m:
                        timeframe_stats.append("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê 5M ===")
                        timeframe_stats.append(
                            f"5m  | Trend: {analysis_5m['trend_ascii']:4} | "
                            f"Imb: {analysis_5m['current_imbalance']:+6.1f}% | "
                            f"Vol Ratio: {analysis_5m['volume_ratio']:4.1f}"
                        )
                        timeframe_stats.append("==================\n")
                
                if timeframe_stats:
                    logger.info("\n".join(timeframe_stats))

    def generate_signals(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        analysis = {
            tf: self.analyze_timeframe(tf) 
            for tf in ['1m', '5m', '15m']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not all(analysis.values()):
            return signals
        
        # 1. –ë–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
        if abs(self.current_metrics['imbalance']) > self.analysis_params['imbalance_threshold']:
            direction = "–ø–æ–∫—É–ø–∫–∏" if self.current_metrics['imbalance'] > 0 else "–ø—Ä–æ–¥–∞–∂–∏"
            signals.append(f"‚ö†Ô∏è –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ —Å—Ç–æ—Ä–æ–Ω—É {direction} "
                         f"({self.current_metrics['imbalance']:.1f}%)")
        
        if all(a['trend'] == "‚ÜóÔ∏è" for a in analysis.values()):
            signals.append("üü¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
        elif all(a['trend'] == "‚ÜòÔ∏è" for a in analysis.values()):
            signals.append("üî¥ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º")
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–±–∞–ª–∞–Ω—Å–∞
        imbalance_speed = self.calculate_imbalance_speed('1m')
        if abs(imbalance_speed) > 15:  # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            direction = "—Ä–æ—Å—Ç–∞" if imbalance_speed > 0 else "–ø–∞–¥–µ–Ω–∏—è"
            signals.append(f"‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å {direction} –∏–º–±–∞–ª–∞–Ω—Å–∞: {imbalance_speed:.1f}/–º–∏–Ω")
        
        # 3. –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        large_orders = self.detect_large_orders()
        if large_orders['bids']:
            signals.append(f"üí´ –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {len(large_orders['bids'])} —à—Ç")
        if large_orders['asks']:
            signals.append(f"üí´ –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {len(large_orders['asks'])} —à—Ç")
        
        # 4. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        accumulation = self.detect_accumulation()
        if accumulation:
            signals.append(f"üîµ {accumulation}")
        
        return signals

    def detect_large_orders(self) -> Dict[str, List]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            result = {'bids': [], 'asks': []}
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-20 –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            bids = sorted(self.current_orderbook['bids'].items(), reverse=True)[:20]
            asks = sorted(self.current_orderbook['asks'].items())[:20]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
            all_volumes = [qty for _, qty in bids]
            all_volumes.extend([qty for _, qty in asks])
            if not all_volumes:
                return result
            
            avg_volume = sum(all_volumes) / len(all_volumes)
            threshold = avg_volume * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 5x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            
            # –ò—â–µ–º –∫—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            for price, qty in bids:
                if qty > threshold:
                    result['bids'].append((price, qty))
                
            for price, qty in asks:
                if qty > threshold:
                    result['asks'].append((price, qty))
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
            return {'bids': [], 'asks': []}

    def detect_accumulation(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–∞–Ω–Ω—ã—Ö
            if len(self.history['1m']['imbalance']) < 5:
                return None
            
            imbalances = self.history['1m']['imbalance'][-5:]
            volumes = self.history['1m']['bid_volume'][-5:]
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:
            # 1. –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–º–±–∞–ª–∞–Ω—Å (–º–∞–ª–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
            imb_volatility = max(imbalances) - min(imbalances)
            
            # 2. –†–∞—Å—Ç—É—â–∏–π –æ–±—ä–µ–º
            volume_trend = volumes[-1] > volumes[0] * 1.2  # –†–æ—Å—Ç –Ω–∞ 20%
            
            # 3. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–±–∞–ª–∞–Ω—Å
            positive_imb = sum(1 for i in imbalances if i > 0) >= 3
            
            if imb_volatility < 10 and volume_trend and positive_imb:
                return "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–º–±–∞–ª–∞–Ω—Å + —Ä–∞—Å—Ç—É—â–∏–π –æ–±—ä–µ–º"
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {str(e)}")
            return None

if __name__ == "__main__":
    print("Starting program...")  # –î–æ–±–∞–≤–∏–º –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥
    monitor = OrderBookMonitor()
    asyncio.run(monitor.run())